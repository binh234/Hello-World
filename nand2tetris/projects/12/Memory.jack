// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram,free;
    /** Initializes the class. */
    function void init() {
		let ram=0;
		let free=2048;
		let free[0]=0;
		let free[1]=14335;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address]=value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array head;
		var Array m;
		
		let head=free;
		let m=free;
		while(~(head[0]=0)){
			if((head[1]>(size+1))&(head[1]<m[1])){
				let m=head;
			}
			let head=head[0];
		}
		let m[1]=m[1]-size-2;
		let m[m[1]+2]=0;
		let m[m[1]+3]=size;
		return m+m[1]+4;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array head;
		var boolean break;
		
		let break=true;
		let head=free;
		while(~(head[0]=0) & break){
			if((head+head[1]+4)=o){
				let head[1]=head[1]+o[-1]+2;
				let break=false;
			}
			let head=head[0];
		}
		if(break){
		let head[0]=o-2;
		}
		return;
    }    
}
