function Arr.new 1
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 0
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop this 1
push argument 0
call Array.new 1
pop local 0
push local 0
pop this 0
label IF_FALSE0
push pointer 0
return
function Arr.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Arr.idx 2
push argument 0
pop pointer 0
push argument 1
push constant 1
add
pop local 1
push argument 1
push this 0
add
pop pointer 1
push that 0
pop local 0
push argument 1
push argument 2
lt
not
push argument 2
push argument 1
lt
not
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 1
return
label IF_FALSE0
label WHILE_EXP0
push local 1
push argument 2
gt
not
not
if-goto WHILE_END0
push local 0
push local 1
push this 0
add
pop pointer 1
push that 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
return
label IF_FALSE1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push argument 1
return
function Arr.Parsing 3
push argument 0
pop pointer 0
push argument 2
pop local 0
push argument 3
pop local 1
label WHILE_EXP0
push local 1
push local 0
lt
not
not
if-goto WHILE_END0
label WHILE_EXP1
push local 0
push this 0
add
pop pointer 1
push that 0
push argument 1
lt
not
if-goto WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
label WHILE_EXP2
push local 1
push this 0
add
pop pointer 1
push that 0
push argument 1
lt
not
not
if-goto WHILE_END2
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP2
label WHILE_END2
push local 0
push local 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push local 0
push this 0
add
push local 1
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push this 0
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Arr.QuickSort 3
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call Arr.idx 3
pop local 2
push local 2
push this 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push this 0
add
pop pointer 1
push that 0
pop local 1
push pointer 0
push local 1
push argument 1
push argument 2
call Arr.Parsing 4
pop local 0
push pointer 0
push argument 1
push local 0
call Arr.QuickSort 3
pop temp 0
push pointer 0
push local 0
push constant 1
add
push argument 2
call Arr.QuickSort 3
pop temp 0
label IF_FALSE0
push constant 0
return
