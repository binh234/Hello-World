/**
 * The Load chip checks the ALU output and considers where there is a jump or not. 
 *	Load chip:
 *	Adress		jump
 *	000			no jump
 *	001			if out>0 then jump
 *	010			if out=0 then jump
 *	011			if out>=0 then jump
 *	100			if out<0 then jump
 *	101			if out!=0 then jump
 *	110			if out<=0 then jump
 *	111			Unconditional jump
 */

CHIP Load {

	IN zr,ng,address[3];
	OUT out;
	
	PARTS:
	Or(a=zr,b=ng,out=notpos);
    Not(in=notpos,out=pos);
    And(a=address[0],b=pos,out=j1);//jump when out is positive
    And(a=address[1],b=zr,out=j2);//jump when out is zero
    And(a=address[2],b=ng,out=j3);//jump when out is negative
    Or(a=j1,b=j2,out=j12);
    Or(a=j12,b=j3,out=out);
}